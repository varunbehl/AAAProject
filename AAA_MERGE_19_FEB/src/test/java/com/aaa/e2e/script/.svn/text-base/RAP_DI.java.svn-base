package com.aaa.e2e.script;

import com.aaa.accelerators.TestEngineWeb;
import com.aaa.utilities.TestUtil;
import com.aaa.web.lib.*;
import com.aaa.web.script.TC_CRSaveAppointmentCall;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.Hashtable;

public class RAP_DI extends LoginLib
{
    public static String callIDCreated;
    public static String spotIDCreated;
    public static String callDateCreated;
    public static String callIDAndDateCombined;
    public static String [] callandfacilityId = new String[3];
    public static long ranRAPID;

    CRLocationsLib crLocationsLib =new CRLocationsLib();
    CRVehicleTriageLib crVehicleTriageLib = new CRVehicleTriageLib();
    CRMemberSearchLib crMemberSearchLib =new CRMemberSearchLib();
    CRServiceLib crServiceLib = new CRServiceLib();
    CRHomeLib crHomeLib = new CRHomeLib();
    CRTowDestinationLib crTowDestinationLib = new CRTowDestinationLib();
    DILoginLib diLoginLib=new DILoginLib();
    LoginRoleLib loginRoleLib = new LoginRoleLib();
    DIMCDLib dimcdLib = new DIMCDLib();
    DIHomeLib diHomeLib = new DIHomeLib();


    @DataProvider
    public Object[][] getTestDataFor_RAPDIEnd2End() {
        return TestUtil.getData("RAPDI", TestData, "e2eRAPDI");
    }
    @Test(dataProvider = "getTestDataFor_RAPDIEnd2End")
    public void RAPDIEnd2End(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                TestEngineWeb.reporter.initTestCaseDescription("RAP DI End to End");
                callReceivingLogin(data);
                crRAPTab(data);
                crVehicleTab(data);
                crLocationsTab(data);
                crTowDestinationTab(data);
                crServiceTab(data);
                callReceivingLogout();
                navigateToApplication("DI");
                dispatchLogin(data);
                diCallClearProcess(data);
                System.out.println("Test completed");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public void callReceivingLogin(Hashtable<String, String> data) throws Throwable {
        navigateToApplication("CR");
        switch (data.get( "LoginRoleCallReceiving")) {
            case "CR":
                login(data.get("LoginName"),data.get("Password"));
                break;
            default:
                break;
        }
        crMemberSearchLib.clickOnPartialCallCloseButton();
    }

    public void crRAPTab(Hashtable<String, String> data) throws Throwable
    {
        crHomeLib.verifyHomeScreen();
        crHomeLib.workFlowSelectionForRAP();
        crMemberSearchLib.verifyIsRapWorkFlowSet();
        crMemberSearchLib.enterDataInClubCode(data.get("clubCode"));
        crMemberSearchLib.clickOnClubClodeSuggestedOption();
        ranRAPID=generateRandomNumber();
        crMemberSearchLib.mandatoryFieldsForRAPCall(data.get("firstName"),data.get("lastName"),ranRAPID,data.get("paymentCode"));
        crMemberSearchLib.enterMemberContactInfoPrimaryPhoneNumber(data.get("phoneNumber"));
        crMemberSearchLib.selectType(data.get("phoneType"));
        crMemberSearchLib.clickPrimRadioBtnRowOne();
    }

    public void crLocationsTab(Hashtable<String, String> data) throws Throwable
    {
        crLocationsLib.clickOnLocationTab();
        crLocationsLib.clickOnManualEntryLinkInLocation();
        crLocationsLib.enterNonMandatoryFieldsInLocations(data.get("LandMark"), data.get("Address"), data.get("crossStreet"), data.get("secondCrossStreet"), data.get("Zip"));
        crLocationsLib.enterAndSaveLocationMandatoryFields(data.get("StreetAddress"), data.get("City"), data.get("State"), data.get("LocationCode"));
        Thread.sleep(2000);
        crLocationsLib.clickOnLocationCodeDropDown();
    }

    public void crVehicleTab(Hashtable<String, String> data) throws Throwable
    {
        crVehicleTriageLib.clickOnVehicleTriageTab();
        crVehicleTriageLib.clickOnManualEntryLinkOnVehicle();
        Thread.sleep(1000);
        crVehicleTriageLib.enterVehicleType(data.get("EnterType"));
        crVehicleTriageLib.clickOnTheTypeSearchFromDropDown();
        Thread.sleep(3000);
        crVehicleTriageLib.enterVehicleYear(data.get("EnterYear"));
        Thread.sleep(2000);
        crVehicleTriageLib.enterVehicleMake(data.get("EnterMake"));
        crVehicleTriageLib.enterVehicleModel(data.get("EnterModel"));
        crVehicleTriageLib.enterVehicleColor(data.get("VehicleColor"));
        Thread.sleep(3000);
        //Need to check about tow destination tab
        crVehicleTriageLib.problemTriage(data.get("WillThisCallBeATow"),data.get( "ProblemTriage"),data.get("ProblemType"), data.get("ProblemTypeOption1"), data.get("ProblemTypeOption2"), data.get("ProblemTypeOption3"));
    }

    public void crTowDestinationTab(Hashtable<String, String> data) throws Throwable
    {
        crTowDestinationLib.clickOnTowDestinationTab();
        boolean noAddressLocationAvailable = crTowDestinationLib.verifyAddressAvailableInTowDestination();
        //reporter.failureReport("No Tow Destination Locations are not Available.", "No Tow Destination Locations are not Available.");
        if (noAddressLocationAvailable) {
            crTowDestinationLib.clickOnManualEntryAndEnterTowDestDetails(data.get("TDLocationAddress"),data.get("TDcrossStreet"),data.get("TDsecondCrossStreet"),data.get("TDCity"),data.get("TDState"),data.get("TDLandMark"),data.get("Towpassengers") );
        } else {
            crTowDestinationLib.enterExistingTowDestAddr(data.get("Towpassengers"));
        }
        Thread.sleep(2000);
    }

    public void crServiceTab(Hashtable<String, String> data) throws Throwable
    {
        crServiceLib.clickOnServiceTab();
        crServiceLib.getFacilityType();
        completeCall(data.get("CompleteCall"));
    }

    public String[] completeCall(String CompleteCall) throws Throwable {
        switch (CompleteCall) {
            case "Save":
                crHomeLib.saveButton();
                crHomeLib.allErrorAlerts();
                //crServiceLib.getCallId();
                callIDCreated = crServiceLib.getCallId();
                spotIDCreated = crServiceLib.getSpotFacilityId();
                callDateCreated=crServiceLib.getCallDate();
                crServiceLib.closeCall();
                break;
            default:
                break;
        }
        callandfacilityId[0] = callIDCreated;
        callandfacilityId[1] = spotIDCreated;
        callandfacilityId[2] = callDateCreated;
        return callandfacilityId;
    }

    public void callReceivingLogout() throws Throwable
    {
        crHomeLib.logout();
        acceptAlert();
        acceptAlert();

    }

    /****************************************************** DISPATCH ******************************************************/

    public void dispatchLogin(Hashtable<String, String> data) throws Throwable {
        switch (data.get("LoginRoleDispatch")) {
            case "DI":
                diLoginLib.login(data.get("DILoginName"),data.get("DIPassword"));
                loginRoleLib.clickOnProceedBtnInDispatchRoleLogin();
                diLoginLib.waitcloseAllBusyIcons();
                diHomeLib.clickOnCloseIconOnQueueSelection();
                break;
            case "AD":
                diLoginLib.login(data.get("DI-ADLoginName"),data.get("DI-ADPassword"));
                Thread.sleep(4000);
                loginRoleLib.roleSelection(data.get("DI-RoleinDispatch"));
                waitcloseAllBusyIcons();
                diHomeLib.clickOnCloseIconOnQueueSelection();


                break;
            default:
                break;
        }
    }

    public void diCallClearProcess(Hashtable<String, String> data) throws Throwable
    {
        callFlow(data);
        dimcdLib.paymentForRAPCall(data.get("Cost"),data.get("CashCollected"),data.get("ServiceType"));
        spotDispatch(data.get("SpotDispatch"),data.get("ResoptFacilityID"),data.get("SPEnterReason"),data.get("ResoptFacilityIDNew") );
        dimcdLib.statusUpdateAsSP(data.get("StatusUpdateSP"));
        dimcdLib.statusUpdateAsAS(data.get("StatusUpdateAS"));
        dimcdLib.statusUpdateAsDI(data.get("StatusUpdateDI"));
        dimcdLib.statusUpdateAsER(data.get("StatusUpdateER"));
        dimcdLib.statusUpdateAsETA(data.get("StatusUpdateETA"));
        dimcdLib.statusUpdateAsOL(data.get("StatusUpdateOL"));
        dimcdLib.statusUpdateAsTW(data.get("StatusUpdateTW"));
        dimcdLib.statusUpdateAsCL(data.get("StatusUpdateCL"));
        dimcdLib.resolutionCode(data.get("ResolutionCode"),data.get("Reason"),data.get("BatteryInfo"));
        dimcdLib.towConfirmation(data.get("TowConfirmation"),data.get("DITowConfComments"),data.get("DITowConfEnterAddress"),data.get("MCDLocationAddress"), data.get("MCDcrossStreet"), data.get("MCDsecondCrossStreet"), data.get("MCDCity"),data.get("DITowConfEnterOtherAddress"));
        dimcdLib.batteyInfo(data.get("BatteryInfo"),data.get("ODOMeterreading"),data.get("BatteryComments"));
        dispatchlogout(data.get("CallFlow"));
    }

    public void callFlow(Hashtable<String, String> data) throws Throwable {
        //Map is out of scope
        crHomeLib.messageDialogBoxClose();
        switch (data.get("CallFlow") ){
            case "Profile" :
                diHomeLib.clickOnProfile();
                callIDAndDateCombined = callandfacilityId[2].substring(0,4) + callandfacilityId[2].substring(5,7)+ callandfacilityId[2].substring(8,10)+callandfacilityId[2].substring(4,5)+callandfacilityId[0];
                diHomeLib.searchAndClickOnCallIdOnProfileWindow(callIDAndDateCombined);
                break;
            case "MCD" :
                diHomeLib.clickOnSearchCallsInDispatch();
                diHomeLib.enterCallIDInfo(callandfacilityId[0]); //callIDCreated
                diHomeLib.clickOnSearchInSearchCalls();
                diHomeLib.clickOnCallDateOrIDLink();
                break;
            case "Truckload" :
                diHomeLib.clickOnTruckLoad();
                diHomeLib.enterSpotFacilityIDInfoOnTruckLoad(callandfacilityId[1]); //spotIDCreated
                diHomeLib.clickOnSpotFacilityOntruckLoadTextBox();
                Thread.sleep(5000);
                diHomeLib.dateDecendingOrder();
                callIDAndDateCombined = callandfacilityId[2].substring(0,4) + callandfacilityId[2].substring(5,7)+ callandfacilityId[2].substring(8,10)+callandfacilityId[2].substring(4,5)+callandfacilityId[0];
                diHomeLib.searchAndClickOnCallIdOnTruckloadWindow(callIDAndDateCombined);
                //diHomeLib.searchAndSelectCallIDOnTruckLoad(callandfacilityId[0]); //callIDCreated
                break;
            default :
                break;
        }
    }

    public void spotDispatch(String SpotDispatch, String ResoptFacilityID, String SPEnterReason, String ResoptFacilityIDNew ) throws Throwable {
        switch (SpotDispatch){
            case "Respot" :
                dimcdLib.clickOnServiceTabInMCDWindow();
                if(callandfacilityId[1]!=ResoptFacilityID) //spotIDCreated
                {
                    dimcdLib.verifyFacilityAndEnterReasonAndReSpot(SPEnterReason, ResoptFacilityID);
                }
                else
                {
                    dimcdLib.verifyFacilityAndEnterReasonAndReSpot(SPEnterReason, ResoptFacilityIDNew);
                }
                break;
            default :
                break;
        }
    }

    public void dispatchlogout(String CallFlow) throws Throwable
    {
        dimcdLib.clickOnMCDCloseWindow();
        if (CallFlow.equalsIgnoreCase("Truckload"))
        {
            diHomeLib.clickonCloseInTruckLoad();
        }
        diHomeLib.logOut();
        acceptAlert();
        acceptAlert();
    }
}
