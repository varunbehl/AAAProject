package com.aaa.web.script;

import com.aaa.utilities.TestUtil;
import com.aaa.web.lib.*;
import com.aaa.web.page.CRMemberSearchPage;
import com.aaa.web.page.CRTowDestinationPage;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.Hashtable;


public class TC_CRRules extends LoginLib {
	CRHomeLib crHomeLib = new CRHomeLib();
    CRMemberSearchLib crMemberSearchLib = new CRMemberSearchLib();
    CRLocationsLib crLocationsLib = new CRLocationsLib();
    CRVehicleTriageLib crVehicleTriageLib = new CRVehicleTriageLib();
    CRServiceLib CRServiceLib = new CRServiceLib();
    CRTowDestinationLib crTowDestinationLib=new CRTowDestinationLib();
    public static String towDestination=null;
    public static String confirmationQuestion=null;




    //End of Call(1)
	
    @DataProvider
    public Object[][] getTestDataFor_verifyEndCall() {
        return TestUtil.getData("verifyEndCall",TestData, "D3CallRecieving");
    }

    @Test(dataProvider = "getTestDataFor_verifyEndCall")
    public void verifyEndCall(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickOnFuel();
                crVehicleTriageLib.clickOnOutOfGas();
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();

            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }


    //Red Flag(3)

    @DataProvider
    public Object[][] getTestDataFor_verifyRedFlag() {
        return TestUtil.getData("verifyRedFlag",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyRedFlag")
    public void verifyRedFlag(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                //navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickOnFuel();
                crVehicleTriageLib.clickOnOutOfGas();
                CRServiceLib.clickOnServiceTab();
                CRServiceLib.enterPriority1(data.get("priority"));
                CRServiceLib.verifyRedFlagChecked();
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }


    //Tow Destination Required - Towing Service(6)


    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationRequiredTowingService() {
        return TestUtil.getData("verifyTowDestinationRequiredTowingService",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationRequiredTowingService")
    public void verifyTowDestinationRequiredTowingService(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickonProblemTypeButton(data.get("ProblemType7"));
                Thread.sleep(2000);
                crVehicleTriageLib.clickonProblemTypeOptions(data.get("ProblemType7Option4"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnTowDestinationTab();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnExistingTowDetinationLink();
                crTowDestinationLib.verifyTowPassengers();
                crTowDestinationLib.enterTowPassengers(data.get("TowPassengers"));
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }



    //Tow Destination Un-required - Light service(9)


    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationUnrequiredLightService() {
        return TestUtil.getData("verifyTowDestinationUnrequiredLightService",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationUnrequiredLightService")
    public void verifyTowDestinationUnrequiredLightService(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
               crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickonProblemTypeButton(data.get("ProblemType7"));
                Thread.sleep(2000);
                crVehicleTriageLib.clickonProblemTypeOptions(data.get("ProblemType7Option4"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnTowDestinationTab();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnExistingTowDetinationLink();
                crTowDestinationLib.verifyTowPassengers();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crVehicleTriageLib.clickonProblemTypeButton(data.get("ProblemType"));
                Thread.sleep(2000);
                crVehicleTriageLib.clickonProblemTypeOptions(data.get("ProblemTypeOption"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                crHomeLib.allErrorAlerts();
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }


    //Tow Destination Required - Extrication Service(13)


    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationRequiredExtricationService() {
        return TestUtil.getData("verifyTowDestinationRequiredExtricationService",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationRequiredExtricationService")
    public void verifyTowDestinationRequiredExtricationService(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
              login(data.get("LoginName"),data.get("Password"));
              Thread.sleep(5000);
               crMemberSearchLib.clickOnPartialCallCloseButton();
               crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnTowDestinationTab();
                Thread.sleep(2000);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnExistingTowDetinationLink();
                crTowDestinationLib.verifyTowPassengers();
                crTowDestinationLib.enterTowPassengers(data.get("TowPassengers"));
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }


    //Tow Destination Un-required Fields - Extrication(16)


    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationUnrequiredFieldsExtrication() {
        return TestUtil.getData("verifyTowDestinationUnrequiredFieldsExtrication",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationUnrequiredFieldsExtrication")
    public void verifyTowDestinationUnrequiredFieldsExtrication(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
               login(data.get("LoginName"),data.get("Password"));
              Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode1"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnTowDestinationTab();
                Thread.sleep(2000);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crTowDestinationLib.clickOnExistingTowDetinationLink();
                crTowDestinationLib.verifyTowPassengers();
                Thread.sleep(2000);
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode2"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab become not required:"+towDestination);
                crHomeLib.allErrorAlerts();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }

    //Tow Destination tab - Hiding the tab for Light Service(20)

    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationTabHidingTabForLightService() {
        return TestUtil.getData("verifyTowDestinationTabHidingTabForLightService",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationTabHidingTabForLightService")
    public void verifyTowDestinationTabHidingTabForLightService(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
               navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode1"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode2"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode3"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode4"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode5"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();
                crHomeLib.leaveButton();
                crHomeLib.allErrorAlerts();
                crHomeLib.logout();


            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }



    //Tow Destination Tab - Showing the tab of Towing(22)

    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationTabShowingTabOfTowing() {
        return TestUtil.getData("verifyTowDestinationTabShowingTabOfTowing",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationTabShowingTabOfTowing")
    public void verifyTowDestinationTabShowingTabOfTowing(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                 login(data.get("LoginName"),data.get("Password"));
                 Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode1"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is visible:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode2"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is visible:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode3"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is visible:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crHomeLib.allErrorAlerts();

                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode4"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is visible:"+towDestination);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.clickCloseIconInSelectedPaceSetterCodeSection();
                Thread.sleep(2000);
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crHomeLib.leaveButton();
                crHomeLib.allErrorAlerts();
                crHomeLib.logout();

            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }




    //Tow Destination Tab - Extrication T931(24)

    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationExtricationT931() {
        return TestUtil.getData("verifyTowDestinationExtricationT931",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationExtricationT931")
    public void verifyTowDestinationExtricationT931(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
              login(data.get("LoginName"),data.get("Password"));
              Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is hidden:"+towDestination);
                crHomeLib.allErrorAlerts();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crHomeLib.saveButton();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                CRServiceLib.getCallId();
                CRServiceLib.closeCallWindow();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }



    //Tow Destination - Extrication T932(27)
    @DataProvider
    public Object[][] getTestDataFor_verifyTowDestinationExtricationT932() {
        return TestUtil.getData("verifyTowDestinationExtricationT932",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifyTowDestinationExtricationT932")
    public void verifyTowDestinationExtricationT932(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
               crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                //select location
                crLocationsLib.clickonBrkdownLocLink();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.enterPaceSetterCodeManually(data.get("paceSettercode"));
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crVehicleTriageLib.validateSelectedPaceSetterCode();
                towDestination = crTowDestinationLib.verifyTowDestinationTab();
                assertTrue(towDestination != null, "Tow Destination Tab is visible:"+towDestination);
                crHomeLib.allErrorAlerts();
                crVehicleTriageLib.handleScriptErrorInVehicleTriagePage();
                crHomeLib.leaveButton();
                crHomeLib.allErrorAlerts();
                crHomeLib.logout();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }




    //SMS Opt-in(30)
    @DataProvider
    public Object[][] getTestDataFor_verifySMSOptIn() {
        return TestUtil.getData("verifySMSOptIn",TestData, "D3CallRecieving");
    }
    @Test(dataProvider = "getTestDataFor_verifySMSOptIn")
    public void verifySMSOptIn(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1717: TC-Rules");
                navigateToApplication("CR");
                login(data.get("LoginName"), data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                //crHomeLib.memberSearchTextBox(data.get("Membersearch"));
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crMemberSearchLib.checkOnSmsCheckBox();
                confirmationQuestion = crMemberSearchLib.getConfirmationPopup();
                assertTrue(confirmationQuestion != null, "SMS script fires with Yes/No options");
                crHomeLib.allErrorAlerts();
                //verify sms flag
                boolean Status = isCheckBoxSelected(CRMemberSearchPage.chkBoxSms);
                assertTrue(Status , "SMS flag is still set");
                crHomeLib.leaveButton();
                crHomeLib.allErrorAlerts();
                Thread.sleep(5000);
                crHomeLib.memberSearchTextBox(Member);
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crMemberSearchLib.checkOnSmsCheckBox();
                confirmationQuestion = crMemberSearchLib.getConfirmationPopup();
                assertTrue(confirmationQuestion != null, "SMS script fires with Yes/No options");
                crHomeLib.allErrorAlertsNoButton();
                //verify sms flag
                boolean Status1 =  !isCheckBoxSelected(CRMemberSearchPage.chkBoxSms);
                assertTrue(Status1 , "SMS flag  is unchecked");
                Thread.sleep(5000);
                crHomeLib.leaveButton();
                crHomeLib.allErrorAlerts();
                crHomeLib.logout();

            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }

    }




}

