package com.aaa.web.script;
import com.aaa.utilities.TestUtil;
import com.aaa.web.lib.*;
import com.aaa.web.page.DISearchCallsPage;
import com.aaa.web.page.LoginPage;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.Hashtable;

public class TC_DIProfileRedFlagCallsTab extends DILoginLib {
    public static String callID;
    public static String callIDWithRedFlag;
    LoginLib login = new LoginLib();
    CRMemberSearchLib crMemberSearchLib =new CRMemberSearchLib();
    CRHomeLib crHomeLib = new CRHomeLib();
    CRLocationsLib crLocationsLib = new CRLocationsLib();
    CRVehicleTriageLib crVehicleTriageLib = new CRVehicleTriageLib();
    CRServiceLib services = new CRServiceLib();
    DILoginLib diLoginLib = new DILoginLib();
    LoginRoleLib role = new LoginRoleLib();
    DIHomeLib diHome = new DIHomeLib();
    DIMCDLib dimcdLib = new DIMCDLib();
    DISearchCallsPage diSearchCallsPage=new DISearchCallsPage();

    /**
     * param :: Hashtable with string inputs
     * return ::void
     * throws :: throwable
     * description ::1802: TC-DI Profile Red Flag Calls Tab
     * date :: 01-01-2018
     * author :: Nidhi Kumari Raut
     */
    
    
    
    
    @DataProvider
    public Object[][] getTestDataFor_verifyCallWithRedFlag()
    {
        return TestUtil.getData("verifyCallWithRedFlag", TestData, "D3Dispatch");
    }
    @Test(dataProvider = "getTestDataFor_verifyCallWithRedFlag")
    public void verifyCallWithRedFlag(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1802: TC-DI Profile Red Flag Calls Tab");    
                navigateToApplication("CR");
                login.login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                crLocationsLib.clickOnSecondKownBrkDowLocation();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickOnFuel();
                crVehicleTriageLib.clickOnOutOfGas();
                services.clickOnServiceTab();
                services.clickOnRedFlagOnServiceTab();
                crHomeLib.saveButton();
                acceptAlert();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                services.getCallId();
                callIDWithRedFlag = services.getCallId();
                services.clickOnRemainInCall();
                Thread.sleep(5000);
                acceptAlert();
                crHomeLib.logout();
                acceptAlert();
                
                navigateToApplication("DI");
                diLoginLib.login(data.get("DILoginName"),data.get("DIPassword"));
                Thread.sleep(5000);
                role.clickOnProceedBtnInDispatchRoleLogin();
                diLoginLib.waitcloseAllBusyIcons();
                diHome.selectAllDispatchCallsAddAndContinueInQueueSelection();
                diHome.clickOnProfile();
                diHome.clickOnHiddenTabsDropdown();
                diHome.selectRedFlagCallTabOnHiddenTab();
                diHome.verifyRedFlagCallID(callIDWithRedFlag);
                acceptAlert();
                crHomeLib.allErrorAlerts();
                
                
                diHome.clickOnSearchCallsInDispatch();
                diHome.enterStartDate(data.get("startDate"));
                diHome.enterCallIDInfo(callIDWithRedFlag);
                diHome.clickOnSearchInSearchCalls();
                diHome.clickOnCallDateOrIDLink();
                dimcdLib.clickOnStatusUpdateTab();
                dimcdLib.enterStatusInStatusUpdateTab(data.get("statusForStatusUpdate"));
                dimcdLib.enterReasonForRedFlagInStatusUpdateTab(data.get("reasonForRedFlagStatusUpdate"));
                dimcdLib.clickOnUpdate();
                dimcdLib.clickOnAssign();
                dimcdLib.selectFacilityOnAssignTabInMCD();
                dimcdLib.selectDispatch();
                dimcdLib.selectEnroute();
                dimcdLib.selectEnrouteTime();
                dimcdLib.selectOnLocation();
                dimcdLib.selectClearCall();
                dimcdLib.selectExitCode();
               
                
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
    
    @DataProvider
    public Object[][] getTestDataFor_verifyCallWithoutRedFlag()
    {
        return TestUtil.getData("verifyCallWithoutRedFlag", TestData, "D3Dispatch");
    }
    @Test(dataProvider = "getTestDataFor_verifyCallWithoutRedFlag")
    public void verifyCallWithoutRedFlag(Hashtable<String, String> data) throws Throwable {
        try {
            if (data.get("RunMode").equals("Y")) {
                this.reporter.initTestCaseDescription("1802: TC-DI Profile Red Flag Calls Tab");
                navigateToApplication("CR");
                login.login(data.get("LoginName"),data.get("Password"));
                Thread.sleep(5000);
                crMemberSearchLib.clickOnPartialCallCloseButton();
                crHomeLib.messageDialogBoxClose();
                Thread.sleep(5000);
                String Member = "";
                if (data.get("Member").equals("db")){
        	        //fetch member details from db
        	        //generating a random number everytime to fetch a new record everytime
        	        int rownum = IntRandomNumberGenerator(50,1000);       
        	        //member from db
        	        Member = CommonDb.selectRandomMemberFromDB(data.get("dbServer"),data.get("dbqueryFileName"),data.get("colomnName"),rownum);
        	        System.out.println("member : "+Member);
                }
                else
                {
                	Member = data.get("Membersearch");
                }
                crHomeLib.memberSearchTextBox(Member);
                crMemberSearchLib.memberNumClick();
                crMemberSearchLib.labelMemberLevelInMemberDetailsSection();
                crLocationsLib.clickOnLocationTab();
                crLocationsLib.clickOnSecondKownBrkDowLocation();
                crVehicleTriageLib.clickOnVehicleTriageTab();
                crVehicleTriageLib.selectExistingVehicleModel();
                crVehicleTriageLib.clickOnFuel();
                crVehicleTriageLib.clickOnOutOfGas();
                crHomeLib.saveButton();
                acceptAlert();
                acceptAlert();
                crHomeLib.allErrorAlerts();
                services.getCallId();
                callID = services.getCallId();
                services.clickOnRemainInCall();
                Thread.sleep(5000);
                acceptAlert();
                crHomeLib.logout();
                acceptAlert();
               
         
                
                navigateToApplication("DI");
                if(isVisibleOnly(LoginPage.txtLoginName,"User Name Text Field"))
                {
                	 diLoginLib.login(data.get("DILoginName"),data.get("DIPassword"));
                     Thread.sleep(5000);
                     role.clickOnProceedBtnInDispatchRoleLogin();
                     diLoginLib.waitcloseAllBusyIcons();
                }
                diHome.selectAllDispatchCallsAddAndContinueInQueueSelection();
                diHome.clickOnProfile();
                diHome.clickOnHiddenTabsDropdown();
                diHome.selectRedFlagCallTabOnHiddenTab();
                diHome.verifyNonRedFlagCallID(callID);
                acceptAlert();
                
                crHomeLib.allErrorAlerts();
                diHome.clickOnSearchCallsInDispatch();
                diHome.enterStartDate(data.get("startDate"));
                diHome.enterCallIDInfo(callID);
                diHome.clickOnSearchInSearchCalls();
                diHome.clickOnCallDateOrIDLink();
                dimcdLib.clickOnStatusUpdateTab();
                dimcdLib.enterStatusInStatusUpdateTab(data.get("statusForStatusUpdate"));
                dimcdLib.enterReasonInStatusUpdateTab(data.get("reasonForStatusUpdate"));
                dimcdLib.clickOnUpdate();
                dimcdLib.clickOnAssign();
                dimcdLib.selectFacilityOnAssignTabInMCD();
                dimcdLib.selectDispatch();
                dimcdLib.selectEnroute();
                dimcdLib.selectEnrouteTime();
                dimcdLib.selectOnLocation();
                dimcdLib.selectClearCall();
                dimcdLib.clickOnMCDCloseWindow();
             
                
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
   
 
}